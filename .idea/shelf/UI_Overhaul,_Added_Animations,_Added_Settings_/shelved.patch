Index: app/src/main/java/com/example/breakout_marko_guastella/Game_Activity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.breakout_marko_guastella;\r\n\r\nimport android.animation.ObjectAnimator;\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Context;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.hardware.Sensor;\r\nimport android.hardware.SensorEvent;\r\nimport android.hardware.SensorEventListener;\r\nimport android.hardware.SensorManager;\r\nimport android.media.AudioAttributes;\r\nimport android.media.SoundPool;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.Looper;\r\nimport android.renderscript.Allocation;\r\nimport android.renderscript.Element;\r\nimport android.renderscript.RenderScript;\r\nimport android.renderscript.ScriptIntrinsicBlur;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.res.ResourcesCompat;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.Iterator;\r\nimport java.util.Random;\r\n\r\npublic class Game_Activity extends AppCompatActivity implements View.OnClickListener, SensorEventListener {\r\n    private ScalingManager displayScaleManager;\r\n    private FrameLayout gameLayout;\r\n    private boolean hasAlreadyBeenCalled = false;\r\n    private BallView ballToRemove, currentBall, currentItemBox, itemBoxToRemove;\r\n    private PlayerView playerObject;\r\n    private ImageButton pauseButton;\r\n    private GameObjectView heartView_1, heartView_2, heartView_3, darkBorderView, blurBackgroundView, timerBackgroundView;\r\n    private Drawable playerDrawable, ballDrawable, obstacleDrawable1, obstacleDrawable2, pauseButtonDrawable, obstacleDrawable3, heartDrawable, darkBorderDrawable, timerBackgroundDrawable, itemBoxDrawable;\r\n    private HashSet obstaclesHashSet, activeBallsHashSet, bonusItemBoxHashSet;\r\n    private Runnable gameLoop, timeRunnable, playerMovementRunnable;\r\n    private Handler handler, timeHandler, playerMovementHandler;\r\n    private ColllisionDetection checkCollisionObject;\r\n    private SoundPool soundPool;\r\n    private TextView scoreText, timeText, scoreAnnotation;\r\n    private String gameState = \"ready\";\r\n    private SensorManager sm;\r\n    private ObjectAnimator animationController;\r\n    private Sensor accelerometer;\r\n    private float sensorState = 0;\r\n    private int deleteDebugClickCounter = 0, sound_brick_1, sound_brick_2, sound_healthRemove, sound_playerHit, sound_powerUp, sound_wallHit, score, time_minutes, time_seconds, bonusItemCounter, hitBrickX, hitBrickY;\r\n    Random rng = new Random();\r\n    boolean spawnItemFlag = false;\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.P)\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        createObjects();\r\n        initSensor();\r\n        setupActivityScreen();\r\n        loadAssets();\r\n        setupGameObjects();\r\n        setupGameLoop();\r\n        initUserInterface();\r\n\r\n        playerMovementRunnable = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                if (getGameState() == \"running\" || getGameState() == \"ready\") {\r\n                    Log.d(\"Sensor\", sensorState + \"\");\r\n                    //Bewegung des Spielers\r\n                    if (playerObject.objectXPosition + sensorState * Constants.PLAYER_SPEED_MULTIPILIER > 0 && playerObject.objectWidthPositionX + sensorState * Constants.PLAYER_SPEED_MULTIPILIER < displayScaleManager.getRightDisplayBorder()) {\r\n                        playerObject.movePlayer(sensorState);\r\n                    }\r\n                }\r\n                playerMovementHandler.postDelayed(this, displayScaleManager.calculateFramesPerSecond(Constants.PLAYERMOVEMENT_REFRESH_RATE));\r\n            }\r\n        };\r\n        playerMovementHandler.postDelayed(playerMovementRunnable, displayScaleManager.calculateFramesPerSecond(Constants.PLAYERMOVEMENT_REFRESH_RATE));\r\n\r\n        time_minutes = Constants.START_TIME;\r\n        timeRunnable = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                //Thread für die Zeit-Steuerug\r\n                switch (getGameState()) {\r\n                    case \"running\":\r\n                        updateTime();\r\n                        break;\r\n                }\r\n\r\n                timeHandler.postDelayed(this, 1000);\r\n            }\r\n        };\r\n        timeHandler.postDelayed(timeRunnable, 1000);\r\n\r\n        gameLoop = new Runnable() {\r\n            @Override\r\n\r\n            public void run() {\r\n                //Item wird vor Iterator gespawnt, da ein HashSet nicht während des Iterierens verändert werden darf.\r\n                if (spawnItemFlag) {\r\n                    spawnItemFlag = false;\r\n                    spawnBonusItem();\r\n                }\r\n\r\n                GameObjectView currentGameObject;\r\n                //Hier wird jeder einzelne Block auf Kollisionen überprüft.\r\n                //Findet eine Kollision statt, wird das Objekt aus dem FrameLayout und dem HashSet entfernt.\r\n                Iterator<BallView> ballViewIterator = activeBallsHashSet.iterator();\r\n                while (ballViewIterator.hasNext()) {\r\n\r\n                    currentBall = ballViewIterator.next();\r\n                    Iterator<GameObjectView> brickViewIterator = obstaclesHashSet.iterator();\r\n                    while (brickViewIterator.hasNext()) {\r\n\r\n                        currentGameObject = brickViewIterator.next();\r\n                        if (checkCollisionObject.checkCollision(currentBall, currentGameObject)) {\r\n                            addScore(1);\r\n                            hitBrickX = currentGameObject.getObjectXPosition();\r\n                            hitBrickY = currentGameObject.getObjectYPosition();\r\n                            spawnItemFlag = true;\r\n                            playSoundFile(\"brick\");\r\n                            gameLayout.removeView(currentGameObject);\r\n                            brickViewIterator.remove();\r\n                        }\r\n                    }\r\n\r\n                    //Prüfe Ball Kollision mit den Wänden\r\n                    if (checkCollisionObject.checkWallCollision(currentBall, displayScaleManager)) {\r\n                        playSoundFile(\"wall\");\r\n                    }\r\n\r\n                    //Prüfe Ball Kollision mit Schläger\r\n                    checkCollisionObject.checkPlayerCollision(currentBall, playerObject, displayScaleManager);\r\n\r\n                    //Beende Spiel wenn alle Bricks zerstört wurden.\r\n                    if (obstaclesHashSet.isEmpty()) {\r\n                        endGame();\r\n                    }\r\n\r\n                    //Bewege den Ball nur wenn das Spiel läuft.\r\n                    if (getGameState() == \"running\") {\r\n                        currentBall.move();\r\n                    }\r\n\r\n                    //Prüfe ob der Ball den Boden berührt.\r\n                    if (checkCollisionObject.checkBottomCollision(currentBall, displayScaleManager)) {\r\n                        if (activeBallsHashSet.size() > 1) {\r\n                            ballToRemove = currentBall;\r\n                            gameLayout.removeView(currentBall);\r\n                        } else {\r\n                            playerHit();\r\n                        }\r\n                    }\r\n\r\n                    //Aktualisieren der Positionen\r\n                    if (getGameState() == \"running\" || getGameState() == \"ready\") {\r\n                        if (currentBall != null) {\r\n                            updateViewPosition(playerObject);\r\n                            updateViewPosition(currentBall);\r\n                        }\r\n\r\n                        //Fixiere den Ball auf dem Spieler solange das Spiel nicht läuft.\r\n                        if (getGameState() == \"ready\") {\r\n                            currentBall.setObjectXPosition(displayScaleManager.getBallSpawnX(playerObject));\r\n                            currentBall.setObjectYPosition(displayScaleManager.getBallSpawnY(playerObject));\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //Itembox Iteration, Markierung zur Löschung und Aktivierung.\r\n                if (getGameState() == \"running\") {\r\n                    Iterator<BallView> itemBoxIterator = bonusItemBoxHashSet.iterator();\r\n                    while (itemBoxIterator.hasNext()) {\r\n                        currentItemBox = itemBoxIterator.next();\r\n                        if (checkCollisionObject.checkPlayerCollision(currentItemBox, playerObject, displayScaleManager)) {\r\n                            itemBoxToRemove = currentItemBox;\r\n                            activateItem(currentItemBox.getItemType());\r\n                        } else {\r\n                            currentItemBox.move();\r\n                            updateViewPosition(currentItemBox);\r\n                        }\r\n\r\n                        if (checkCollisionObject.checkBottomCollision(currentItemBox, displayScaleManager)) {\r\n                            if (bonusItemBoxHashSet.size() > 0) {\r\n                                itemBoxToRemove = currentItemBox;\r\n                                gameLayout.removeView(currentItemBox);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //Lösche die Itembox, welche den Boden berührt hat (Muss außerhalb des Iterators sein!).\r\n                if (itemBoxToRemove != null) {\r\n                    bonusItemBoxHashSet.remove(itemBoxToRemove);\r\n                    gameLayout.removeView(itemBoxToRemove);\r\n                    itemBoxToRemove = null;\r\n                }\r\n\r\n                //Lösche den Ball, welcher den Boden berührt hat (Muss außerhalb des Iterators sein!).\r\n                if (ballToRemove != null) {\r\n                    activeBallsHashSet.remove(ballToRemove);\r\n                    ballToRemove = null;\r\n                }\r\n\r\n                //Stoppe den Loop sobald der Spieler tot ist.\r\n                if (playerObject.getHealth() > 0)\r\n                    handler.postDelayed(this, displayScaleManager.calculateFramesPerSecond(Constants.FPS));\r\n            }\r\n        };\r\n        //Starte den GameLoop\r\n        handler.post(gameLoop);\r\n    }\r\n\r\n    private void setupGameLoop() {\r\n        handler = new Handler(Looper.myLooper());\r\n        timeHandler = new Handler(Looper.myLooper());\r\n        playerMovementHandler = new Handler(Looper.myLooper());\r\n    }\r\n\r\n    private void createObjects() {\r\n        //Erzeuge ein ScalingManager welcher für die Positionierung und Größe der Objekte verantwortlich ist.\r\n        displayScaleManager = new ScalingManager(this.getWindowManager());\r\n        checkCollisionObject = new ColllisionDetection();\r\n        obstaclesHashSet = new HashSet<>();\r\n        activeBallsHashSet = new HashSet<>();\r\n        bonusItemBoxHashSet = new HashSet<>();\r\n        playerObject = new PlayerView(this, Constants.PLAYER_WIDTH, Constants.PLAYER_HEIGHT, displayScaleManager.getPlayerSpawnX(), displayScaleManager.getPlayerSpawnY(), Constants.PLAYER_HEALTH);\r\n        pauseButton = new ImageButton(this);\r\n    }\r\n\r\n    private void updateTime() {\r\n        if (time_seconds < 1 && time_minutes < 1) {\r\n            endGame();\r\n        }\r\n\r\n        if (time_minutes != 0 && time_seconds == 0) {\r\n\r\n            if (time_seconds == 0) {\r\n                time_minutes--;\r\n                time_seconds = 60;\r\n            }\r\n        }\r\n\r\n        if (time_seconds != 0) {\r\n            time_seconds--;\r\n        }\r\n\r\n        if (time_seconds < 10) {\r\n            timeText.setText(time_minutes + \":\" + \"0\" + time_seconds);\r\n        } else {\r\n            timeText.setText(time_minutes + \":\" + time_seconds);\r\n        }\r\n    }\r\n\r\n    private void setupGameObjects() {\r\n        displayScaleManager.calculateObstacleSize();\r\n\r\n        //Erzeuge Blöcke\r\n        int obstacleSpawnX = 0;\r\n        int obstacleSpawnY = 0;\r\n        GameObjectView temporaryGameObject;\r\n\r\n        //Diese Verschachtelte Schleife sorgt für die Erzeugung der Blöcke. Die Anzahl der Spalten und Reihen\r\n        //können in der Klasse Constants angepasst werden.\r\n        //Die Äussere Schleife kontrolliert die Reihen, die innere ist für die Spalten zuständig.\r\n        //Am ende jedes Schleifendurchlaufs, wird das erzeugte Objekt in ein HashSet geladen.\r\n        int colorCounter = 0;\r\n        for (int i = 0; i < Constants.OBSTACLE_ROWS; i++) {\r\n            for (int k = 0; k < Constants.OBSTACLE_COLUMNS; k++) {\r\n                //if (colorCounter == 3) colorCounter = 0;\r\n                //colorCounter += 2 - 1;\r\n                temporaryGameObject = new GameObjectView(this, Constants.OBSTACLE_WIDTH, Constants.OBSTACLE_HEIGHT, obstacleSpawnX, obstacleSpawnY, 1);\r\n\r\n                //Prüft in welcher Reihe der Block erstellt wird und weißt diesem in folge dessen die richtige Farbe zu.\r\n                switch (i) {\r\n                    case 0:\r\n                        temporaryGameObject.setImageDrawable(obstacleDrawable1);\r\n                        break;\r\n                    case 1:\r\n                        temporaryGameObject.setImageDrawable(obstacleDrawable2);\r\n                        break;\r\n                    case 2:\r\n                        temporaryGameObject.setImageDrawable(obstacleDrawable3);\r\n                        break;\r\n                    default:\r\n                        temporaryGameObject.setImageDrawable(obstacleDrawable1);\r\n                        break;\r\n                }\r\n\r\n                setupLayout(temporaryGameObject);\r\n                temporaryGameObject.setScaleType(ImageView.ScaleType.FIT_XY);\r\n                gameLayout.addView(temporaryGameObject);\r\n                obstaclesHashSet.add(temporaryGameObject);\r\n\r\n                obstacleSpawnX += Constants.OBSTACLE_WIDTH;\r\n            }\r\n\r\n            obstacleSpawnX = 0;\r\n            obstacleSpawnY += Constants.OBSTACLE_HEIGHT;\r\n        }\r\n\r\n        //Initialisiere Spieler\r\n        playerObject.setImageDrawable(playerDrawable);\r\n        setupLayout(playerObject);\r\n        playerObject.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        gameLayout.addView(playerObject);\r\n\r\n        //Initialisiere Ball\r\n        spawnBall(false);\r\n\r\n        //Initialisiere Pause Button\r\n        pauseButton.setImageResource(R.drawable.pause_button);\r\n        //pauseButton.setwid\r\n        pauseButton.setLayoutParams(new FrameLayout.LayoutParams(200, 200)););\r\n        pauseButton.setX(displayScaleManager.getRightDisplayBorder()-pauseButton.getWidth()/2);\r\n        pauseButton.setY(80);\r\n        pauseButton.setLayoutParams(lp);\r\n        gameLayout.addView(pauseButton);\r\n    }\r\n\r\n\r\n    //Setzt die Größe und Position für das jeweilige FrameLayout (z.B. die des Balls.)\r\n    private void setupLayout(GameObjectView v) {\r\n        v.setLayoutParams(new FrameLayout.LayoutParams(v.objectWidth, v.objectHeigth));\r\n        v.setX(v.getObjectXPosition());\r\n        v.setY(v.getObjectYPosition());\r\n    }\r\n\r\n    //Ändert die Position des FrameLayouts\r\n    private void updateViewPosition(GameObjectView v) {\r\n        v.setX(v.getObjectXPosition());\r\n        v.setY(v.getObjectYPosition());\r\n\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.P)\r\n    private void setupActivityScreen() {\r\n\r\n        //Setze benötigte Flags für den Fullscreen & Notch Support\r\n        getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\r\n                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\r\n                | View.SYSTEM_UI_FLAG_FULLSCREEN\r\n                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        actionBar.hide();\r\n        getWindow().getAttributes().layoutInDisplayCutoutMode = WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES;\r\n        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\r\n        setContentView(R.layout.activity_game_);\r\n\r\n        //Verweis des FrameLayouts\r\n        gameLayout = findViewById(R.id.gameLayout);\r\n        gameLayout.setOnClickListener(this);\r\n    }\r\n\r\n    private void spawnBonusItem() {\r\n        int generatedRandom = rng.nextInt(99);\r\n        if (generatedRandom < 24) {\r\n            spawnItemBox(\"ball\");\r\n        }\r\n    }\r\n\r\n    private void spawnItemBox(String item) {\r\n        switch (item) {\r\n            case \"ball\":\r\n                BallView ballItemBoxObject = new BallView(this, Constants.ITEMBOX_WIDTH, Constants.ITEMBOX_HEIGHT, (hitBrickX + Constants.OBSTACLE_WIDTH / 2) - Constants.ITEMBOX_WIDTH / 2, (hitBrickY + Constants.OBSTACLE_HEIGHT / 2) - Constants.ITEMBOX_HEIGHT / 2, 0, \"ball\");\r\n                ballItemBoxObject.setImageDrawable(itemBoxDrawable);\r\n                setupLayout(ballItemBoxObject);\r\n                gameLayout.addView(ballItemBoxObject);\r\n                startBallMovement(ballItemBoxObject, true);\r\n                bonusItemBoxHashSet.add(ballItemBoxObject);\r\n        }\r\n    }\r\n\r\n    private void activateItem(String item) {\r\n        switch (item) {\r\n            case (\"ball\"):\r\n                playSoundFile(\"powerUp\");\r\n                spawnBall(true);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private void spawnBall(boolean isBonus) {\r\n        BallView ballObject = new BallView(this, Constants.BALL_WIDTH, Constants.BALL_HEIGHT, displayScaleManager.getBallSpawnX(playerObject), displayScaleManager.getBallSpawnY(playerObject), 0, \"none\");\r\n        ballObject.setImageDrawable(ballDrawable);\r\n        setupLayout(ballObject);\r\n        gameLayout.addView(ballObject);\r\n        if (isBonus) startBallMovement(ballObject, false);\r\n        activeBallsHashSet.add(ballObject);\r\n    }\r\n\r\n    private void initUserInterface() {\r\n        heartView_1 = new GameObjectView(this, Constants.HEART_IMG_SIZE, Constants.HEART_IMG_SIZE, displayScaleManager.getHeartSpawnX(), displayScaleManager.getHeartSpawnY(), 0);\r\n        heartView_1.setImageDrawable(heartDrawable);\r\n        setupLayout(heartView_1);\r\n        heartView_1.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        heartView_1.setAlpha(150);\r\n        gameLayout.addView(heartView_1);\r\n\r\n        heartView_2 = new GameObjectView(this, Constants.HEART_IMG_SIZE, Constants.HEART_IMG_SIZE, (int) (displayScaleManager.getHeartSpawnX() - Constants.HEART_IMG_SIZE * 1.1), displayScaleManager.getHeartSpawnY(), 0);\r\n        heartView_2.setImageDrawable(heartDrawable);\r\n        setupLayout(heartView_2);\r\n        heartView_2.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        heartView_2.setAlpha(150);\r\n        gameLayout.addView(heartView_2);\r\n\r\n        heartView_3 = new GameObjectView(this, Constants.HEART_IMG_SIZE, Constants.HEART_IMG_SIZE, (int) (displayScaleManager.getHeartSpawnX() - Constants.HEART_IMG_SIZE * 2.2), displayScaleManager.getHeartSpawnY(), 0);\r\n        heartView_3.setImageDrawable(heartDrawable);\r\n        setupLayout(heartView_3);\r\n        heartView_3.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        heartView_3.setAlpha(150);\r\n        gameLayout.addView(heartView_3);\r\n\r\n        darkBorderView = new GameObjectView(this, displayScaleManager.getHighscoreBorderWidth(), displayScaleManager.getHighscoreBorderHeight(), displayScaleManager.getHighscoreBorderX(), displayScaleManager.getHighscoreBorderY(), 0);\r\n        darkBorderView.setImageDrawable(darkBorderDrawable);\r\n        setupLayout(darkBorderView);\r\n        darkBorderView.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        darkBorderView.setAlpha(200);\r\n\r\n        timeText = new TextView(this);\r\n        timeText.setText(Constants.START_TIME+\":00\");\r\n        timeText.setTextSize(24);\r\n        timeText.measure(0, 0);\r\n        timeText.setX((displayScaleManager.getRightDisplayBorder() / 2) - timeText.getMeasuredWidth() / 2);\r\n        timeText.setY(0);\r\n        timeText.setTextColor(Color.WHITE);\r\n\r\n        timerBackgroundView = new GameObjectView(this, (int) (timeText.getMeasuredWidth() * 2), (int) (timeText.getMeasuredHeight() * 1.1), (((displayScaleManager.getRightDisplayBorder() / 2) - (timeText.getMeasuredWidth() * 2) / 2)), 0, 0);\r\n        timerBackgroundView.setImageDrawable(timerBackgroundDrawable);\r\n        setupLayout(timerBackgroundView);\r\n        timerBackgroundView.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        timerBackgroundView.setAlpha(200);\r\n        gameLayout.addView(timerBackgroundView);\r\n        gameLayout.addView(timeText);\r\n\r\n    }\r\n\r\n    private void loadAssets() {\r\n        //Laden der Drawables\r\n        playerDrawable = ResourcesCompat.getDrawable(getApplication().getResources(), R.drawable.player_v2, null);\r\n        ballDrawable = ResourcesCompat.getDrawable(getApplication().getResources(), R.drawable.ball_v1, null);\r\n        obstacleDrawable1 = ResourcesCompat.getDrawable(getApplication().getResources(), R.drawable.obstacle_red, null);\r\n        obstacleDrawable2 = ResourcesCompat.getDrawable(getApplication().getResources(), R.drawable.obstacle_yellow, null);\r\n        obstacleDrawable3 = ResourcesCompat.getDrawable(getApplication().getResources(), R.drawable.obstacle_green, null);\r\n        heartDrawable = ResourcesCompat.getDrawable(getApplication().getResources(), R.drawable.img_heart, null);\r\n        heartDrawable = ResourcesCompat.getDrawable(getApplication().getResources(), R.drawable.img_heart, null);\r\n        darkBorderDrawable = ResourcesCompat.getDrawable(getApplication().getResources(), R.drawable.img_black_background, null);\r\n        timerBackgroundDrawable = ResourcesCompat.getDrawable(getApplication().getResources(), R.drawable.img_timer, null);\r\n        itemBoxDrawable = ResourcesCompat.getDrawable(getApplication().getResources(), R.drawable.ball_itembox, null);\r\n        pauseButtonDrawable = ResourcesCompat.getDrawable(getApplication().getResources(), R.drawable.pause_button, null);\r\n\r\n        //Initialisiere den SoundPool\r\n        AudioAttributes attrs = new AudioAttributes.Builder()\r\n                .setUsage(AudioAttributes.USAGE_GAME)\r\n                .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)\r\n                .build();\r\n        soundPool = new SoundPool.Builder()\r\n                .setMaxStreams(5)\r\n                .setAudioAttributes(attrs)\r\n                .build();\r\n\r\n        sound_brick_1 = soundPool.load(this, R.raw.sound_brick_1, 1);\r\n        sound_brick_2 = soundPool.load(this, R.raw.sound_brick_2, 2);\r\n        sound_healthRemove = soundPool.load(this, R.raw.sound_health_remove, 3);\r\n        sound_playerHit = soundPool.load(this, R.raw.sound_player_hit, 4);\r\n        sound_powerUp = soundPool.load(this, R.raw.sound_power_up, 5);\r\n        sound_wallHit = soundPool.load(this, R.raw.sound_wall_hit, 6);\r\n    }\r\n\r\n    public void playSoundFile(String collided) {\r\n\r\n        if (getGameState() != \"running\") return;\r\n        switch (collided) {\r\n\r\n            case \"bottom\":\r\n                soundPool.play(sound_healthRemove, 1, 1, 1, 0, 1.0F);\r\n                break;\r\n            case \"wall\":\r\n                soundPool.play(sound_wallHit, 1, 1, 3, 0, 1.0F);\r\n                break;\r\n            case \"player\":\r\n                soundPool.play(sound_playerHit, 1, 1, 1, 0, 1.0F);\r\n                break;\r\n            case \"powerUp\":\r\n                soundPool.play(sound_powerUp, 1, 1, 1, 0, 1.0F);\r\n                break;\r\n            case \"brick\":\r\n                soundPool.play(sound_brick_1, 1, 1, 1, 0, 1.0F);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private void showScoreText() {\r\n        score += time_minutes * 60 + time_seconds + playerObject.getHealth();\r\n\r\n        gameLayout.addView(darkBorderView);\r\n\r\n        scoreText = new TextView(this);\r\n        gameLayout.addView(scoreText);\r\n        scoreText.setText(String.valueOf(score));\r\n        scoreText.setTextSize(26);\r\n        scoreText.measure(0, 0);\r\n        scoreText.setX((displayScaleManager.getRightDisplayBorder() / 2) - scoreText.getMeasuredWidth() / 2);\r\n        scoreText.setY(displayScaleManager.getBottomDisplayBorder() / 2 - scoreText.getMeasuredHeight() / 2);\r\n        scoreText.setTextColor(Color.WHITE);\r\n\r\n        scoreAnnotation = new TextView(this);\r\n        gameLayout.addView(scoreAnnotation);\r\n        scoreAnnotation.setText(\"- SCORE -\");\r\n        scoreAnnotation.setTextSize(30);\r\n        scoreAnnotation.measure(0, 0);\r\n        scoreAnnotation.setX((displayScaleManager.getRightDisplayBorder() / 2) - scoreAnnotation.getMeasuredWidth() / 2);\r\n        scoreAnnotation.setY(displayScaleManager.getBottomDisplayBorder() / 2 - scoreText.getMeasuredHeight() * 3);\r\n        scoreAnnotation.setTextColor(Color.WHITE);\r\n    }\r\n\r\n    private void resetGame() {\r\n        finish();\r\n        startActivity(getIntent());\r\n    }\r\n\r\n    public void onClick(View v) {\r\n        switch (getGameState()) {\r\n            case \"ended\":\r\n                resetGame();\r\n                break;\r\n            case \"ready\":\r\n                Log.d(\"Test\", \"Movement Started\");\r\n                setGameState(\"running\");\r\n                startBallMovement(currentBall, false);\r\n                break;\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"Range\")\r\n    private void endGame() {\r\n        if (hasAlreadyBeenCalled) return;\r\n        hasAlreadyBeenCalled = true;\r\n        setGameState(\"ended\");\r\n        blurBackground();\r\n        showScoreText();\r\n    }\r\n\r\n    private void blurBackground() {\r\n        blurBackgroundView = new GameObjectView(this, displayScaleManager.getRightDisplayBorder(), displayScaleManager.getBottomDisplayBorder(), 0, 0, 0);\r\n        blurBackgroundView.setBackgroundDrawable(new BitmapDrawable(getResources(), blur(this, captureScreenShot(gameLayout))));\r\n        setupLayout(blurBackgroundView);\r\n        blurBackgroundView.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        gameLayout.addView(blurBackgroundView);\r\n    }\r\n\r\n\r\n    //Quelle: https://developerandroidguide.blogspot.com/2017/05/how-to-blur-background-images.html\r\n    public Bitmap captureScreenShot(View view) {\r\n        /*\r\n         * Creating a Bitmap of view with ARGB_4444.\r\n         * */\r\n        Bitmap bitmap = Bitmap.createBitmap(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_4444);\r\n        Canvas canvas = new Canvas(bitmap);\r\n        Drawable backgroundDrawable = view.getBackground();\r\n        if (backgroundDrawable != null) {\r\n            backgroundDrawable.draw(canvas);\r\n        } else {\r\n            canvas.drawColor(Color.parseColor(\"#80000000\"));\r\n        }\r\n        view.draw(canvas);\r\n        return bitmap;\r\n    }\r\n\r\n    //Quelle: https://developerandroidguide.blogspot.com/2017/05/how-to-blur-background-images.html\r\n    public static Bitmap blur(Context context, Bitmap image) {\r\n        float BITMAP_SCALE = 0.4f;\r\n        float BLUR_RADIUS = 15f;\r\n\r\n        int width = Math.round(image.getWidth() * BITMAP_SCALE);\r\n        int height = Math.round(image.getHeight() * BITMAP_SCALE);\r\n\r\n        Bitmap inputBitmap = Bitmap.createScaledBitmap(image, width, height, false);\r\n        Bitmap outputBitmap = Bitmap.createBitmap(inputBitmap);\r\n        RenderScript rs = RenderScript.create(context);\r\n        ScriptIntrinsicBlur theIntrinsic = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\r\n        Allocation tmpIn = Allocation.createFromBitmap(rs, inputBitmap);\r\n        Allocation tmpOut = Allocation.createFromBitmap(rs, outputBitmap);\r\n        theIntrinsic.setRadius(BLUR_RADIUS);\r\n        theIntrinsic.setInput(tmpIn);\r\n        theIntrinsic.forEach(tmpOut);\r\n        tmpOut.copyTo(outputBitmap);\r\n\r\n        return outputBitmap;\r\n    }\r\n\r\n    private void startBallMovement(BallView ball, boolean isItem) {\r\n\r\n        if (isItem) {\r\n            ball.setDeltaX(0);\r\n            ball.setDeltaY(5);\r\n\r\n        } else {\r\n            int generatedRandom = rng.nextInt(Constants.MAX_BALL_SPEED) + 10;\r\n            if (rng.nextInt(9) > 4) {\r\n                generatedRandom = generatedRandom * -1;\r\n            }\r\n            ball.setDeltaX(generatedRandom);\r\n\r\n            ball.setDeltaY(Constants.MAX_BALL_SPEED * -1);\r\n        }\r\n    }\r\n\r\n    private void setGameState(String state) {\r\n        gameState = state;\r\n    }\r\n\r\n    public String getGameState() {\r\n        return gameState;\r\n    }\r\n\r\n    private void initSensor() {\r\n        sm = (SensorManager) getSystemService(SENSOR_SERVICE);\r\n        accelerometer = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);\r\n        sm.registerListener((SensorEventListener) this, accelerometer, SensorManager.SENSOR_DELAY_GAME);\r\n    }\r\n\r\n    @Override\r\n\r\n    public void onSensorChanged(SensorEvent event) {\r\n        sensorState = event.values[1];\r\n    }\r\n\r\n    @Override\r\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\r\n\r\n    }\r\n\r\n    public void playerHit() {\r\n        switch (playerObject.getHealth()) {\r\n\r\n            case 3:\r\n                gameLayout.removeView(heartView_3);\r\n                playerObject.removeHealth();\r\n                resetBall();\r\n                playSoundFile(\"bottom\");\r\n                break;\r\n\r\n            case 2:\r\n                gameLayout.removeView(heartView_2);\r\n                playerObject.removeHealth();\r\n                resetBall();\r\n                playSoundFile(\"bottom\");\r\n                break;\r\n\r\n            case 1:\r\n                gameLayout.removeView(heartView_1);\r\n                playerObject.removeHealth();\r\n                playSoundFile(\"bottom\");\r\n                endGame();\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n    private void resetBall() {\r\n        setGameState(\"ready\");\r\n        gameLayout.removeView(currentBall);\r\n        activeBallsHashSet.remove(currentBall);\r\n        spawnBall(false);\r\n        updateViewPosition(currentBall);\r\n    }\r\n\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        soundPool.release();\r\n        soundPool = null;\r\n    }\r\n\r\n    private void addScore(int amount) {\r\n        score += amount;\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/breakout_marko_guastella/Game_Activity.java	(revision 6670b1075b38874639cf8a0c5c56dd55d053a5e3)
+++ app/src/main/java/com/example/breakout_marko_guastella/Game_Activity.java	(date 1623514898168)
@@ -326,10 +326,9 @@
         //Initialisiere Pause Button
         pauseButton.setImageResource(R.drawable.pause_button);
         //pauseButton.setwid
-        pauseButton.setLayoutParams(new FrameLayout.LayoutParams(200, 200)););
+        pauseButton.setLayoutParams(new FrameLayout.LayoutParams(200, 200));
         pauseButton.setX(displayScaleManager.getRightDisplayBorder()-pauseButton.getWidth()/2);
         pauseButton.setY(80);
-        pauseButton.setLayoutParams(lp);
         gameLayout.addView(pauseButton);
     }
 
@@ -652,23 +651,24 @@
         switch (playerObject.getHealth()) {
 
             case 3:
+                playSoundFile("player");
                 gameLayout.removeView(heartView_3);
                 playerObject.removeHealth();
                 resetBall();
-                playSoundFile("bottom");
+
                 break;
 
             case 2:
+                playSoundFile("player");
                 gameLayout.removeView(heartView_2);
                 playerObject.removeHealth();
                 resetBall();
-                playSoundFile("bottom");
                 break;
 
             case 1:
+                playSoundFile("player");
                 gameLayout.removeView(heartView_1);
                 playerObject.removeHealth();
-                playSoundFile("bottom");
                 endGame();
                 break;
 
